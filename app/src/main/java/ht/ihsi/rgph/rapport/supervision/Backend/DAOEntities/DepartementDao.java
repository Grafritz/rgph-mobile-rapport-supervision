package ht.ihsi.rgph.rapport.supervision.Backend.DAOEntities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ht.ihsi.rgph.rapport.supervision.Backend.DAOEntities.Departement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tbl_departement".
*/
public class DepartementDao extends AbstractDao<Departement, Void> {

    public static final String TABLENAME = "tbl_departement";

    /**
     * Properties of entity Departement.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property DeptId = new Property(0, String.class, "DeptId", false, "DeptId");
        public final static Property DeptNom = new Property(1, String.class, "DeptNom", false, "DeptNom");
    };


    public DepartementDao(DaoConfig config) {
        super(config);
    }
    
    public DepartementDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tbl_departement\" (" + //
                "\"DeptId\" TEXT NOT NULL UNIQUE ," + // 0: DeptId
                "\"DeptNom\" TEXT);"); // 1: DeptNom
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tbl_departement\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Departement entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getDeptId());
 
        String DeptNom = entity.getDeptNom();
        if (DeptNom != null) {
            stmt.bindString(2, DeptNom);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Departement readEntity(Cursor cursor, int offset) {
        Departement entity = new Departement( //
            cursor.getString(offset + 0), // DeptId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // DeptNom
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Departement entity, int offset) {
        entity.setDeptId(cursor.getString(offset + 0));
        entity.setDeptNom(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Departement entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Departement entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
