package ht.ihsi.rgph.rapport.supervision.Backend.DAOEntities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ht.ihsi.rgph.rapport.supervision.Backend.DAOEntities.Reponses;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Tbl_Reponses".
*/
public class ReponsesDao extends AbstractDao<Reponses, Long> {

    public static final String TABLENAME = "Tbl_Reponses";

    /**
     * Properties of entity Reponses.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CodeReponse = new Property(0, Long.class, "codeReponse", true, "codeReponse");
        public final static Property CodeQuestion = new Property(1, Long.class, "codeQuestion", false, "codeQuestion");
        public final static Property LibelleReponse = new Property(2, String.class, "libelleReponse", false, "libelleReponse");
        public final static Property IsCorrect = new Property(3, Boolean.class, "isCorrect", false, "isCorrect");
        public final static Property ScoreTotal = new Property(4, Integer.class, "scoreTotal", false, "scoreTotal");
        public final static Property EstEnfant = new Property(5, Boolean.class, "estEnfant", false, "estEnfant");
        public final static Property AvoirEnfant = new Property(6, Boolean.class, "avoirEnfant", false, "avoirEnfant");
        public final static Property CodeParent = new Property(7, String.class, "codeParent", false, "codeParent");
    };


    public ReponsesDao(DaoConfig config) {
        super(config);
    }
    
    public ReponsesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Tbl_Reponses\" (" + //
                "\"codeReponse\" INTEGER PRIMARY KEY ," + // 0: codeReponse
                "\"codeQuestion\" INTEGER," + // 1: codeQuestion
                "\"libelleReponse\" TEXT," + // 2: libelleReponse
                "\"isCorrect\" INTEGER," + // 3: isCorrect
                "\"scoreTotal\" INTEGER," + // 4: scoreTotal
                "\"estEnfant\" INTEGER," + // 5: estEnfant
                "\"avoirEnfant\" INTEGER," + // 6: avoirEnfant
                "\"codeParent\" TEXT);"); // 7: codeParent
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Tbl_Reponses\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Reponses entity) {
        stmt.clearBindings();
 
        Long codeReponse = entity.getCodeReponse();
        if (codeReponse != null) {
            stmt.bindLong(1, codeReponse);
        }
 
        Long codeQuestion = entity.getCodeQuestion();
        if (codeQuestion != null) {
            stmt.bindLong(2, codeQuestion);
        }
 
        String libelleReponse = entity.getLibelleReponse();
        if (libelleReponse != null) {
            stmt.bindString(3, libelleReponse);
        }
 
        Boolean isCorrect = entity.getIsCorrect();
        if (isCorrect != null) {
            stmt.bindLong(4, isCorrect ? 1L: 0L);
        }
 
        Integer scoreTotal = entity.getScoreTotal();
        if (scoreTotal != null) {
            stmt.bindLong(5, scoreTotal);
        }
 
        Boolean estEnfant = entity.getEstEnfant();
        if (estEnfant != null) {
            stmt.bindLong(6, estEnfant ? 1L: 0L);
        }
 
        Boolean avoirEnfant = entity.getAvoirEnfant();
        if (avoirEnfant != null) {
            stmt.bindLong(7, avoirEnfant ? 1L: 0L);
        }
 
        String codeParent = entity.getCodeParent();
        if (codeParent != null) {
            stmt.bindString(8, codeParent);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Reponses readEntity(Cursor cursor, int offset) {
        Reponses entity = new Reponses( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // codeReponse
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // codeQuestion
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // libelleReponse
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isCorrect
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // scoreTotal
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // estEnfant
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // avoirEnfant
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // codeParent
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Reponses entity, int offset) {
        entity.setCodeReponse(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCodeQuestion(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLibelleReponse(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsCorrect(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setScoreTotal(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setEstEnfant(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setAvoirEnfant(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setCodeParent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Reponses entity, long rowId) {
        entity.setCodeReponse(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Reponses entity) {
        if(entity != null) {
            return entity.getCodeReponse();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
