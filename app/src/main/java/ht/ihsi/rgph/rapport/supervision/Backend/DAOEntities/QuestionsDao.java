package ht.ihsi.rgph.rapport.supervision.Backend.DAOEntities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ht.ihsi.rgph.rapport.supervision.Backend.DAOEntities.Questions;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Tbl_Questions".
*/
public class QuestionsDao extends AbstractDao<Questions, Long> {

    public static final String TABLENAME = "Tbl_Questions";

    /**
     * Properties of entity Questions.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CodeQuestion = new Property(0, Long.class, "codeQuestion", true, "codeQuestion");
        public final static Property Libelle = new Property(1, String.class, "libelle", false, "libelle");
        public final static Property DetailsQuestion = new Property(2, String.class, "detailsQuestion", false, "detailsQuestion");
        public final static Property IndicationsQuestion = new Property(3, String.class, "indicationsQuestion", false, "indicationsQuestion");
        public final static Property AvoirJustificationYN = new Property(4, Boolean.class, "avoirJustificationYN", false, "avoirJustificationYN");
        public final static Property TypeQuestion = new Property(5, Integer.class, "typeQuestion", false, "typeQuestion");
        public final static Property ScoreTotal = new Property(6, Integer.class, "scoreTotal", false, "scoreTotal");
        public final static Property CaratereAccepte = new Property(7, Integer.class, "caratereAccepte", false, "caratereAccepte");
        public final static Property NbreValeurMinimal = new Property(8, Integer.class, "nbreValeurMinimal", false, "nbreValeurMinimal");
        public final static Property NbreCaratereMaximal = new Property(9, Integer.class, "nbreCaratereMaximal", false, "nbreCaratereMaximal");
        public final static Property QPrecedent = new Property(10, String.class, "qPrecedent", false, "qPrecedent");
        public final static Property QSuivant = new Property(11, String.class, "qSuivant", false, "qSuivant");
    };


    public QuestionsDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Tbl_Questions\" (" + //
                "\"codeQuestion\" INTEGER PRIMARY KEY ," + // 0: codeQuestion
                "\"libelle\" TEXT," + // 1: libelle
                "\"detailsQuestion\" TEXT," + // 2: detailsQuestion
                "\"indicationsQuestion\" TEXT," + // 3: indicationsQuestion
                "\"avoirJustificationYN\" INTEGER," + // 4: avoirJustificationYN
                "\"typeQuestion\" INTEGER," + // 5: typeQuestion
                "\"scoreTotal\" INTEGER," + // 6: scoreTotal
                "\"caratereAccepte\" INTEGER," + // 7: caratereAccepte
                "\"nbreValeurMinimal\" INTEGER," + // 8: nbreValeurMinimal
                "\"nbreCaratereMaximal\" INTEGER," + // 9: nbreCaratereMaximal
                "\"qPrecedent\" TEXT," + // 10: qPrecedent
                "\"qSuivant\" TEXT);"); // 11: qSuivant
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Tbl_Questions\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Questions entity) {
        stmt.clearBindings();
 
        Long codeQuestion = entity.getCodeQuestion();
        if (codeQuestion != null) {
            stmt.bindLong(1, codeQuestion);
        }
 
        String libelle = entity.getLibelle();
        if (libelle != null) {
            stmt.bindString(2, libelle);
        }
 
        String detailsQuestion = entity.getDetailsQuestion();
        if (detailsQuestion != null) {
            stmt.bindString(3, detailsQuestion);
        }
 
        String indicationsQuestion = entity.getIndicationsQuestion();
        if (indicationsQuestion != null) {
            stmt.bindString(4, indicationsQuestion);
        }
 
        Boolean avoirJustificationYN = entity.getAvoirJustificationYN();
        if (avoirJustificationYN != null) {
            stmt.bindLong(5, avoirJustificationYN ? 1L: 0L);
        }
 
        Integer typeQuestion = entity.getTypeQuestion();
        if (typeQuestion != null) {
            stmt.bindLong(6, typeQuestion);
        }
 
        Integer scoreTotal = entity.getScoreTotal();
        if (scoreTotal != null) {
            stmt.bindLong(7, scoreTotal);
        }
 
        Integer caratereAccepte = entity.getCaratereAccepte();
        if (caratereAccepte != null) {
            stmt.bindLong(8, caratereAccepte);
        }
 
        Integer nbreValeurMinimal = entity.getNbreValeurMinimal();
        if (nbreValeurMinimal != null) {
            stmt.bindLong(9, nbreValeurMinimal);
        }
 
        Integer nbreCaratereMaximal = entity.getNbreCaratereMaximal();
        if (nbreCaratereMaximal != null) {
            stmt.bindLong(10, nbreCaratereMaximal);
        }
 
        String qPrecedent = entity.getQPrecedent();
        if (qPrecedent != null) {
            stmt.bindString(11, qPrecedent);
        }
 
        String qSuivant = entity.getQSuivant();
        if (qSuivant != null) {
            stmt.bindString(12, qSuivant);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Questions readEntity(Cursor cursor, int offset) {
        Questions entity = new Questions( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // codeQuestion
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // libelle
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // detailsQuestion
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // indicationsQuestion
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // avoirJustificationYN
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // typeQuestion
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // scoreTotal
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // caratereAccepte
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // nbreValeurMinimal
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // nbreCaratereMaximal
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // qPrecedent
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // qSuivant
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Questions entity, int offset) {
        entity.setCodeQuestion(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLibelle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDetailsQuestion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIndicationsQuestion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAvoirJustificationYN(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setTypeQuestion(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setScoreTotal(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setCaratereAccepte(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setNbreValeurMinimal(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setNbreCaratereMaximal(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setQPrecedent(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setQSuivant(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Questions entity, long rowId) {
        entity.setCodeQuestion(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Questions entity) {
        if(entity != null) {
            return entity.getCodeQuestion();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
