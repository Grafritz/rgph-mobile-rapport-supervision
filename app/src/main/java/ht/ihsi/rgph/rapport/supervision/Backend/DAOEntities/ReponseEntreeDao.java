package ht.ihsi.rgph.rapport.supervision.Backend.DAOEntities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ht.ihsi.rgph.rapport.supervision.Backend.DAOEntities.ReponseEntree;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Tbl_AgentRapport".
*/
public class ReponseEntreeDao extends AbstractDao<ReponseEntree, Long> {

    public static final String TABLENAME = "Tbl_AgentRapport";

    /**
     * Properties of entity ReponseEntree.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CodeReponseEntree = new Property(0, Long.class, "codeReponseEntree", true, "codeReponseEntree");
        public final static Property CodeAgent = new Property(1, Long.class, "codeAgent", false, "codeAgent");
        public final static Property CodeFormulaireExercice = new Property(2, Long.class, "codeFormulaireExercice", false, "codeFormulaireExercice");
        public final static Property CodeQuestion = new Property(3, Long.class, "codeQuestion", false, "codeQuestion");
        public final static Property CodeReponse = new Property(4, Long.class, "codeReponse", false, "codeReponse");
        public final static Property ScoreReponse = new Property(5, Long.class, "ScoreReponse", false, "ScoreReponse");
        public final static Property CreatedBy = new Property(6, String.class, "createdBy", false, "createdBy");
        public final static Property DateCreated = new Property(7, String.class, "dateCreated", false, "dateCreated");
        public final static Property ModifBy = new Property(8, String.class, "modifBy", false, "modifBy");
        public final static Property DateModif = new Property(9, String.class, "dateModif", false, "dateModif");
    };


    public ReponseEntreeDao(DaoConfig config) {
        super(config);
    }
    
    public ReponseEntreeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Tbl_AgentRapport\" (" + //
                "\"codeReponseEntree\" INTEGER PRIMARY KEY ," + // 0: codeReponseEntree
                "\"codeAgent\" INTEGER," + // 1: codeAgent
                "\"codeFormulaireExercice\" INTEGER," + // 2: codeFormulaireExercice
                "\"codeQuestion\" INTEGER," + // 3: codeQuestion
                "\"codeReponse\" INTEGER," + // 4: codeReponse
                "\"ScoreReponse\" INTEGER," + // 5: ScoreReponse
                "\"createdBy\" TEXT," + // 6: createdBy
                "\"dateCreated\" TEXT," + // 7: dateCreated
                "\"modifBy\" TEXT," + // 8: modifBy
                "\"dateModif\" TEXT);"); // 9: dateModif
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Tbl_AgentRapport\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ReponseEntree entity) {
        stmt.clearBindings();
 
        Long codeReponseEntree = entity.getCodeReponseEntree();
        if (codeReponseEntree != null) {
            stmt.bindLong(1, codeReponseEntree);
        }
 
        Long codeAgent = entity.getCodeAgent();
        if (codeAgent != null) {
            stmt.bindLong(2, codeAgent);
        }
 
        Long codeFormulaireExercice = entity.getCodeFormulaireExercice();
        if (codeFormulaireExercice != null) {
            stmt.bindLong(3, codeFormulaireExercice);
        }
 
        Long codeQuestion = entity.getCodeQuestion();
        if (codeQuestion != null) {
            stmt.bindLong(4, codeQuestion);
        }
 
        Long codeReponse = entity.getCodeReponse();
        if (codeReponse != null) {
            stmt.bindLong(5, codeReponse);
        }
 
        Long ScoreReponse = entity.getScoreReponse();
        if (ScoreReponse != null) {
            stmt.bindLong(6, ScoreReponse);
        }
 
        String createdBy = entity.getCreatedBy();
        if (createdBy != null) {
            stmt.bindString(7, createdBy);
        }
 
        String dateCreated = entity.getDateCreated();
        if (dateCreated != null) {
            stmt.bindString(8, dateCreated);
        }
 
        String modifBy = entity.getModifBy();
        if (modifBy != null) {
            stmt.bindString(9, modifBy);
        }
 
        String dateModif = entity.getDateModif();
        if (dateModif != null) {
            stmt.bindString(10, dateModif);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ReponseEntree readEntity(Cursor cursor, int offset) {
        ReponseEntree entity = new ReponseEntree( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // codeReponseEntree
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // codeAgent
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // codeFormulaireExercice
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // codeQuestion
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // codeReponse
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // ScoreReponse
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // createdBy
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // dateCreated
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // modifBy
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // dateModif
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ReponseEntree entity, int offset) {
        entity.setCodeReponseEntree(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCodeAgent(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCodeFormulaireExercice(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCodeQuestion(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setCodeReponse(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setScoreReponse(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setCreatedBy(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDateCreated(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setModifBy(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDateModif(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ReponseEntree entity, long rowId) {
        entity.setCodeReponseEntree(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ReponseEntree entity) {
        if(entity != null) {
            return entity.getCodeReponseEntree();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
