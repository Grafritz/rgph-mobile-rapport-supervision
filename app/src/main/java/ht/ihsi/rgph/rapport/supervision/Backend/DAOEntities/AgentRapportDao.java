package ht.ihsi.rgph.rapport.supervision.Backend.DAOEntities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ht.ihsi.rgph.rapport.supervision.Backend.DAOEntities.AgentRapport;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AGENT_RAPPORT".
*/
public class AgentRapportDao extends AbstractDao<AgentRapport, Long> {

    public static final String TABLENAME = "AGENT_RAPPORT";

    /**
     * Properties of entity AgentRapport.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CodeAgent = new Property(0, Long.class, "codeAgent", true, "codeAgent");
        public final static Property NomCompletAgent = new Property(1, String.class, "nomCompletAgent", false, "nomCompletAgent");
        public final static Property CommentairesGeneraux  = new Property(2, String.class, "commentairesGeneraux ", false, "commentairesGeneraux");
        public final static Property ScoreFinalAtteint = new Property(3, String.class, "scoreFinalAtteint", false, "scoreFinalAtteint");
        public final static Property ScoreOui1 = new Property(4, Long.class, "ScoreOui1", false, "ScoreOui1");
        public final static Property ScoreNon2 = new Property(5, Long.class, "ScoreNon2", false, "ScoreNon2");
        public final static Property ScoreMoyennement3 = new Property(6, Long.class, "ScoreMoyennement3", false, "ScoreMoyennement3");
        public final static Property ScoreHorsObservation4 = new Property(7, Long.class, "ScoreHorsObservation4", false, "ScoreHorsObservation4");
        public final static Property ScoreUneFois1 = new Property(8, Long.class, "ScoreUneFois1", false, "ScoreUneFois1");
        public final static Property ScoreAuMoins2Fois2 = new Property(9, Long.class, "ScoreAuMoins2Fois2", false, "ScoreAuMoins2Fois2");
        public final static Property ScoreNon3 = new Property(10, Long.class, "ScoreNon3", false, "ScoreNon3");
        public final static Property CreatedBy = new Property(11, String.class, "createdBy", false, "createdBy");
        public final static Property DateCreated = new Property(12, String.class, "dateCreated", false, "dateCreated");
    };


    public AgentRapportDao(DaoConfig config) {
        super(config);
    }
    
    public AgentRapportDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AGENT_RAPPORT\" (" + //
                "\"codeAgent\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: codeAgent
                "\"nomCompletAgent\" TEXT," + // 1: nomCompletAgent
                "\"commentairesGeneraux\" TEXT," + // 2: commentairesGeneraux 
                "\"scoreFinalAtteint\" TEXT," + // 3: scoreFinalAtteint
                "\"ScoreOui1\" INTEGER," + // 4: ScoreOui1
                "\"ScoreNon2\" INTEGER," + // 5: ScoreNon2
                "\"ScoreMoyennement3\" INTEGER," + // 6: ScoreMoyennement3
                "\"ScoreHorsObservation4\" INTEGER," + // 7: ScoreHorsObservation4
                "\"ScoreUneFois1\" INTEGER," + // 8: ScoreUneFois1
                "\"ScoreAuMoins2Fois2\" INTEGER," + // 9: ScoreAuMoins2Fois2
                "\"ScoreNon3\" INTEGER," + // 10: ScoreNon3
                "\"createdBy\" TEXT," + // 11: createdBy
                "\"dateCreated\" TEXT);"); // 12: dateCreated
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AGENT_RAPPORT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AgentRapport entity) {
        stmt.clearBindings();
 
        Long codeAgent = entity.getCodeAgent();
        if (codeAgent != null) {
            stmt.bindLong(1, codeAgent);
        }
 
        String nomCompletAgent = entity.getNomCompletAgent();
        if (nomCompletAgent != null) {
            stmt.bindString(2, nomCompletAgent);
        }
 
        String commentairesGeneraux  = entity.getCommentairesGeneraux ();
        if (commentairesGeneraux  != null) {
            stmt.bindString(3, commentairesGeneraux );
        }
 
        String scoreFinalAtteint = entity.getScoreFinalAtteint();
        if (scoreFinalAtteint != null) {
            stmt.bindString(4, scoreFinalAtteint);
        }
 
        Long ScoreOui1 = entity.getScoreOui1();
        if (ScoreOui1 != null) {
            stmt.bindLong(5, ScoreOui1);
        }
 
        Long ScoreNon2 = entity.getScoreNon2();
        if (ScoreNon2 != null) {
            stmt.bindLong(6, ScoreNon2);
        }
 
        Long ScoreMoyennement3 = entity.getScoreMoyennement3();
        if (ScoreMoyennement3 != null) {
            stmt.bindLong(7, ScoreMoyennement3);
        }
 
        Long ScoreHorsObservation4 = entity.getScoreHorsObservation4();
        if (ScoreHorsObservation4 != null) {
            stmt.bindLong(8, ScoreHorsObservation4);
        }
 
        Long ScoreUneFois1 = entity.getScoreUneFois1();
        if (ScoreUneFois1 != null) {
            stmt.bindLong(9, ScoreUneFois1);
        }
 
        Long ScoreAuMoins2Fois2 = entity.getScoreAuMoins2Fois2();
        if (ScoreAuMoins2Fois2 != null) {
            stmt.bindLong(10, ScoreAuMoins2Fois2);
        }
 
        Long ScoreNon3 = entity.getScoreNon3();
        if (ScoreNon3 != null) {
            stmt.bindLong(11, ScoreNon3);
        }
 
        String createdBy = entity.getCreatedBy();
        if (createdBy != null) {
            stmt.bindString(12, createdBy);
        }
 
        String dateCreated = entity.getDateCreated();
        if (dateCreated != null) {
            stmt.bindString(13, dateCreated);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AgentRapport readEntity(Cursor cursor, int offset) {
        AgentRapport entity = new AgentRapport( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // codeAgent
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nomCompletAgent
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // commentairesGeneraux 
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // scoreFinalAtteint
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // ScoreOui1
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // ScoreNon2
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // ScoreMoyennement3
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // ScoreHorsObservation4
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // ScoreUneFois1
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // ScoreAuMoins2Fois2
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // ScoreNon3
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // createdBy
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // dateCreated
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AgentRapport entity, int offset) {
        entity.setCodeAgent(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNomCompletAgent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCommentairesGeneraux (cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setScoreFinalAtteint(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setScoreOui1(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setScoreNon2(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setScoreMoyennement3(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setScoreHorsObservation4(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setScoreUneFois1(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setScoreAuMoins2Fois2(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setScoreNon3(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setCreatedBy(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDateCreated(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AgentRapport entity, long rowId) {
        entity.setCodeAgent(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AgentRapport entity) {
        if(entity != null) {
            return entity.getCodeAgent();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
