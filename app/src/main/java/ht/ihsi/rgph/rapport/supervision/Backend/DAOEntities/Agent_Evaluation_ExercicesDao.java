package ht.ihsi.rgph.rapport.supervision.Backend.DAOEntities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ht.ihsi.rgph.rapport.supervision.Backend.DAOEntities.Agent_Evaluation_Exercices;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Tbl_Agent_Evaluation_Exercices".
*/
public class Agent_Evaluation_ExercicesDao extends AbstractDao<Agent_Evaluation_Exercices, Void> {

    public static final String TABLENAME = "Tbl_Agent_Evaluation_Exercices";

    /**
     * Properties of entity Agent_Evaluation_Exercices.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CodeExercice = new Property(0, Long.class, "codeExercice", false, "codeExercice");
        public final static Property PersonnelId = new Property(1, Long.class, "personnelId", false, "personnelId");
        public final static Property DureeEvaluationEnSeconde = new Property(2, String.class, "dureeEvaluationEnSeconde", false, "dureeEvaluationEnSeconde");
        public final static Property DureeDuRepondantEnSeconde = new Property(3, String.class, "dureeDuRepondantEnSeconde", false, "dureeDuRepondantEnSeconde");
        public final static Property DateDebutEvaluationDuRepondant = new Property(4, String.class, "dateDebutEvaluationDuRepondant", false, "dateDebutEvaluationDuRepondant");
        public final static Property DateFinEvaluationDuRepondant = new Property(5, String.class, "dateFinEvaluationDuRepondant", false, "dateFinEvaluationDuRepondant");
    };


    public Agent_Evaluation_ExercicesDao(DaoConfig config) {
        super(config);
    }
    
    public Agent_Evaluation_ExercicesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Tbl_Agent_Evaluation_Exercices\" (" + //
                "\"codeExercice\" INTEGER," + // 0: codeExercice
                "\"personnelId\" INTEGER," + // 1: personnelId
                "\"dureeEvaluationEnSeconde\" TEXT," + // 2: dureeEvaluationEnSeconde
                "\"dureeDuRepondantEnSeconde\" TEXT," + // 3: dureeDuRepondantEnSeconde
                "\"dateDebutEvaluationDuRepondant\" TEXT," + // 4: dateDebutEvaluationDuRepondant
                "\"dateFinEvaluationDuRepondant\" TEXT);"); // 5: dateFinEvaluationDuRepondant
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Tbl_Agent_Evaluation_Exercices\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Agent_Evaluation_Exercices entity) {
        stmt.clearBindings();
 
        Long codeExercice = entity.getCodeExercice();
        if (codeExercice != null) {
            stmt.bindLong(1, codeExercice);
        }
 
        Long personnelId = entity.getPersonnelId();
        if (personnelId != null) {
            stmt.bindLong(2, personnelId);
        }
 
        String dureeEvaluationEnSeconde = entity.getDureeEvaluationEnSeconde();
        if (dureeEvaluationEnSeconde != null) {
            stmt.bindString(3, dureeEvaluationEnSeconde);
        }
 
        String dureeDuRepondantEnSeconde = entity.getDureeDuRepondantEnSeconde();
        if (dureeDuRepondantEnSeconde != null) {
            stmt.bindString(4, dureeDuRepondantEnSeconde);
        }
 
        String dateDebutEvaluationDuRepondant = entity.getDateDebutEvaluationDuRepondant();
        if (dateDebutEvaluationDuRepondant != null) {
            stmt.bindString(5, dateDebutEvaluationDuRepondant);
        }
 
        String dateFinEvaluationDuRepondant = entity.getDateFinEvaluationDuRepondant();
        if (dateFinEvaluationDuRepondant != null) {
            stmt.bindString(6, dateFinEvaluationDuRepondant);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Agent_Evaluation_Exercices readEntity(Cursor cursor, int offset) {
        Agent_Evaluation_Exercices entity = new Agent_Evaluation_Exercices( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // codeExercice
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // personnelId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dureeEvaluationEnSeconde
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dureeDuRepondantEnSeconde
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dateDebutEvaluationDuRepondant
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // dateFinEvaluationDuRepondant
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Agent_Evaluation_Exercices entity, int offset) {
        entity.setCodeExercice(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPersonnelId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setDureeEvaluationEnSeconde(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDureeDuRepondantEnSeconde(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDateDebutEvaluationDuRepondant(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDateFinEvaluationDuRepondant(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Agent_Evaluation_Exercices entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Agent_Evaluation_Exercices entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
