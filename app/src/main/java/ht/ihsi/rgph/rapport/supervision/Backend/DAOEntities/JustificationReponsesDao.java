package ht.ihsi.rgph.rapport.supervision.Backend.DAOEntities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ht.ihsi.rgph.rapport.supervision.Backend.DAOEntities.JustificationReponses;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Tbl_JustificationReponses".
*/
public class JustificationReponsesDao extends AbstractDao<JustificationReponses, Long> {

    public static final String TABLENAME = "Tbl_JustificationReponses";

    /**
     * Properties of entity JustificationReponses.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CodeJustification = new Property(0, Long.class, "codeJustification", true, "codeJustification");
        public final static Property CodeQuestion = new Property(1, Long.class, "codeQuestion", false, "codeQuestion");
        public final static Property Libelle = new Property(2, String.class, "libelle", false, "libelle");
        public final static Property IsCorrect = new Property(3, Boolean.class, "isCorrect", false, "isCorrect");
        public final static Property CreatedBy = new Property(4, String.class, "createdBy", false, "createdBy");
        public final static Property DateCreated = new Property(5, String.class, "dateCreated", false, "dateCreated");
    };


    public JustificationReponsesDao(DaoConfig config) {
        super(config);
    }
    
    public JustificationReponsesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Tbl_JustificationReponses\" (" + //
                "\"codeJustification\" INTEGER PRIMARY KEY ," + // 0: codeJustification
                "\"codeQuestion\" INTEGER," + // 1: codeQuestion
                "\"libelle\" TEXT," + // 2: libelle
                "\"isCorrect\" INTEGER," + // 3: isCorrect
                "\"createdBy\" TEXT," + // 4: createdBy
                "\"dateCreated\" TEXT);"); // 5: dateCreated
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Tbl_JustificationReponses\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, JustificationReponses entity) {
        stmt.clearBindings();
 
        Long codeJustification = entity.getCodeJustification();
        if (codeJustification != null) {
            stmt.bindLong(1, codeJustification);
        }
 
        Long codeQuestion = entity.getCodeQuestion();
        if (codeQuestion != null) {
            stmt.bindLong(2, codeQuestion);
        }
 
        String libelle = entity.getLibelle();
        if (libelle != null) {
            stmt.bindString(3, libelle);
        }
 
        Boolean isCorrect = entity.getIsCorrect();
        if (isCorrect != null) {
            stmt.bindLong(4, isCorrect ? 1L: 0L);
        }
 
        String createdBy = entity.getCreatedBy();
        if (createdBy != null) {
            stmt.bindString(5, createdBy);
        }
 
        String dateCreated = entity.getDateCreated();
        if (dateCreated != null) {
            stmt.bindString(6, dateCreated);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public JustificationReponses readEntity(Cursor cursor, int offset) {
        JustificationReponses entity = new JustificationReponses( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // codeJustification
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // codeQuestion
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // libelle
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isCorrect
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // createdBy
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // dateCreated
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, JustificationReponses entity, int offset) {
        entity.setCodeJustification(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCodeQuestion(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLibelle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsCorrect(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setCreatedBy(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDateCreated(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(JustificationReponses entity, long rowId) {
        entity.setCodeJustification(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(JustificationReponses entity) {
        if(entity != null) {
            return entity.getCodeJustification();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
